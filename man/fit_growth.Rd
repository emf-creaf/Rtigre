% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit_growth.r
\name{fit_growth}
\alias{fit_growth}
\title{Non-linear fit to a time-independent growth curve.}
\usage{
fit_growth(
  dat,
  fo,
  curve_type = "logistic",
  sigmoid_rate = F,
  kmax = NULL,
  algorithm = "nlsLM",
  log_transf = T,
  verbose = T
)
}
\arguments{
\item{dat}{\code{data.frame} containing all data to be used in the fit.}

\item{fo}{\code{formula} describing the right-hand-side of the dependence of the
growth rate on the predictors.}

\item{curve_type}{character. It indicates the type of growth curve to be used.}

\item{sigmoid_rate}{logical. If TRUE, growth rate will also be represented by a logistic.}

\item{kmax}{NULL or numeric. If NULL, its value will be calculated from the
data.}

\item{algorithm}{character, the algorithm to be used. See 'Details'.}

\item{log_transf}{logical. If TRUE, a log-transformation will be applied to
the dependent variable.}

\item{verbose}{logical. If TRUE, information on the progress of the regression is produced.}
}
\value{
a \code{nls} object. See \link[stats]{nls} for details.
}
\description{
Non-linear least-squares fit of growth data to a time-independent growth curve.
}
\details{
It is challenging to figure good starting values for a non-linear fit. When the algorithm implemented
in e.g. \link[stats]{nls} does not work (which is often the case), one can then turn to using a
slower but safer method like e.g. "Nelder-Mead", or  of the \link[stats]{nls}

The algorithm first fits an explicit expression of the growth rate as a function of the
explanatory variables. The resulting coefficients will be the starting values for the
final non-linear regression.
Be aware that, in some cases, \code{sigmoid = T} may give rise to "singular gradient" error messages in
\link[stats]{nls} or some other error and/or warning messages for \link[minpack.lm]{nlsLM}
or \link[nlsr]{nlsr}.
The default algorithm is "nlsLM", which implements the "nlsLM" function in package
\code{minpack}. Other allowed values are "nls", which used the built-in \code{nls}
function and "nlsr" from package \code{nlsr}. The Levenberg-Marquardt in \link[minpack.lm]{nlsLM}
is very fast and stable and should work fine most of the time.
}
\examples{

## Common parameters. Simple example.
tdiff <- 5
t <- seq(1, 100, by = tdiff)
max_y <- 120
k <- .1

## Fake climatic data.
temp <- runif(100, 18.6, 21.3)
prec <- runif(100, 359, 514)
t <- c(10, 20)
intercept <- .02
coef_temp <- .00061
coef_prec <- .000052
k <- intercept+coef_temp*temp+coef_prec*prec+rnorm(length(temp))*.001
y1 <- max_y/(1+exp(-(k*t[1]-2)))
y2 <- max_y/(1+exp(-(k*t[2]-2)))
dat <- data.frame(tdiff = t[2]-t[1], max_y = max_y, y1 = y1, y2 = y2, temp = temp, prec = prec)
r <- fit_growth(dat, ~ temp + prec, curve_type = "logistic", log_transf = F, sigmoid_rate = F)
print(summary(r))

## Same data, but simulating a sigmoid rate.
k <- 2/(1+exp(-(intercept+coef_temp*temp+coef_prec*prec)))+rnorm(length(temp))*.01
y1 <- max_y/(1+exp(-(k*t[1]-2)))
y2 <- max_y/(1+exp(-(k*t[2]-2)))
dat <- data.frame(tdiff=t[2]-t[1], max_y = max_y, y1 = y1, y2 = y2, temp = temp, prec = prec)
r <- fit_growth(dat, ~ temp + prec, curve_type = "logistic", log_transf = F, sigmoid_rate = T)
print(summary(r))

## Actual Pinus uncinata data from the Spanish Forest Inventories.
data("Punci_IFN")

## Add time difference between second and third Inventory.
Punci_IFN$tdiff <- 10

r <- fit_growth(Punci_IFN, ~prec+temp)
print(summary(r))
plot(with(Punci_IFN, y2-y1), predict(r), pch = 16, cex = .1)

r <- fit_growth(Punci_IFN, ~prec+temp, sigmoid_rate = T)
print(summary(r))
plot(with(Punci_IFN, y2-y1), exp(predict(r)+.5*var(summary(r)$residuals)), pch = 16, cex = .1, xlim = c(0,10), ylim = c(0,10))


}
